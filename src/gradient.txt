
type
  TRGB = record
          R, G, B: Byte;
        end; {rec RGB}

const
  C1: TRGB = (R:255; G:255; B:0);
  C2: TRGB = (R:255; G:0; B:0);

procedure TForm1.FormPaint(Sender: TObject);
var
  X: Integer;
  BitMap: TBitMap;
  R, G, B, KR, KG, KB: Single;
begin
  BitMap := TBitMap.Create;
  BitMap.Width := ClientWidth;
  BitMap.Height := ClientHeight;
  R := C1.R; G := C1.G; B := C1.B;
  KR := (C2.R - C1.R) / ClientWidth;
  KG := (C2.G - C1.G) / ClientWidth;
  KB := (C2.B - C1.B) / ClientWidth;
  for X := 0 to ClientWidth do
  begin
    with BitMap.Canvas do
    begin
      Pen.Color := RGB (Round (R), Round (G), Round (B));
      MoveTo (X, 0);
      LineTo (X, ClientHeight);
      R := R + KR; G := G + KG; B := B + KB;
    end; {with}
  end; {for}
  Canvas.Draw (0, 0, BitMap);
  BitMap.Free;
end;







void DrawGradient(int width, int begin, int end)
{
	float r,g,b,dr,dg,db;
	r=GetRValue(begin)/255.0;
	g=GetGValue(begin)/255.0;
	b=GetBValue(begin)/255.0;
	dr=(GetRValue(end)/255.0 - r)/(float)width;
	dg=(GetGValue(end)/255.0 - g)/(float)width;
	db=(GetBValue(end)/255.0 - b)/(float)width;
	for(int i=1;i<=width;i++)
	{
		r+=dr;
		g+=dg;
		b+=db;
		for(int k=1;k<=100;k++)
		{
			glBegin(GL_POINTS);
				glColor3f(r,g,b);
				glVertex2d(i,k);
			glEnd();
		}
	}
}



